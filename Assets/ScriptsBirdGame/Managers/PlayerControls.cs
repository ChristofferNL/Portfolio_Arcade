//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Managers/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerAM"",
            ""id"": ""1b8aedfd-e934-45cf-971d-b88624eeab6c"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""c101f67c-1b24-4cdb-8a8c-c65f5ef73bcf"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Flap"",
                    ""type"": ""Button"",
                    ""id"": ""4c16dac4-1848-4ef6-867c-805e05a0af5e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""b9399d3f-674e-4609-a5c7-9643c07a63f5"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""6d3eb079-899b-49a1-9416-9688839a9651"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""3cd5cd8c-7eb7-4ecc-a83a-bcce4fe41827"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0e812dd1-aa56-48af-9df7-a5b72e3c90b1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerAM
        m_PlayerAM = asset.FindActionMap("PlayerAM", throwIfNotFound: true);
        m_PlayerAM_Move = m_PlayerAM.FindAction("Move", throwIfNotFound: true);
        m_PlayerAM_Flap = m_PlayerAM.FindAction("Flap", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerAM
    private readonly InputActionMap m_PlayerAM;
    private IPlayerAMActions m_PlayerAMActionsCallbackInterface;
    private readonly InputAction m_PlayerAM_Move;
    private readonly InputAction m_PlayerAM_Flap;
    public struct PlayerAMActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerAMActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerAM_Move;
        public InputAction @Flap => m_Wrapper.m_PlayerAM_Flap;
        public InputActionMap Get() { return m_Wrapper.m_PlayerAM; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerAMActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerAMActions instance)
        {
            if (m_Wrapper.m_PlayerAMActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerAMActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerAMActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerAMActionsCallbackInterface.OnMove;
                @Flap.started -= m_Wrapper.m_PlayerAMActionsCallbackInterface.OnFlap;
                @Flap.performed -= m_Wrapper.m_PlayerAMActionsCallbackInterface.OnFlap;
                @Flap.canceled -= m_Wrapper.m_PlayerAMActionsCallbackInterface.OnFlap;
            }
            m_Wrapper.m_PlayerAMActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Flap.started += instance.OnFlap;
                @Flap.performed += instance.OnFlap;
                @Flap.canceled += instance.OnFlap;
            }
        }
    }
    public PlayerAMActions @PlayerAM => new PlayerAMActions(this);
    public interface IPlayerAMActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnFlap(InputAction.CallbackContext context);
    }
}
